@charset "utf-8";
/**
css: Cascading Style Sheets 用于渲染HTML元素标签的样式
	1. 内联样式- 在HTML元素中使用"style" 属性
		a: 当特殊的样式需要应用到个别元素时;
		b: 样式属性可以包含任何 CSS 属性;
		c: style="color:blue; margin-left:20px;"
	2. 内部样式表 -在HTML文档头部 <head> 区域使用<style> 元素 来包含CSS
		a: 当单个文件需要特别样式时;
		b: <head>
				<style>
					
				</style>
			</head>
	3. 外部引用 - 使用外部 CSS 文件 (最好的方式)
		a: 当样式需要被应用到很多页面的时候;（共用）
		b: <link rel="stylesheet" type="text/css" href="mystyle.css">
	
	ps: 
	1. 对于大部分标签，以上两种方法均可，且修改父级标签，子级标签特性也会改变。
	但某些标签确无法通过修改父级标签来改变子级标签特性，如a标签，修改其颜色特性，必须直接修改 a 标签的特性才可。
	2. 如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式。
*/
/**
基本格式：
选择器{
	以及一条或多条 [声明(属性:值)]
}
选择器：
	1. 元素标签: 直接用其名称(html{},body{}..);
	2. class属性: .class_name{}; 
		ps:class可以在多个元素中使用,且可同时调用多个；
	3. id: #id{}； 
		ps: ID属性不要以数字开头（无法在 Mozilla 或 Firefox 中起作用）
		
声明：
	属性:值；属性:值；属性:值；
	
Ps：对于有多个值的属性 -> 属性:值 值 值;

分组 选择器：（多个选择器样式一样，每个选择器用逗号分隔）
h1,h2,p{}

嵌套 选择器：（选择器内部的选择器的样式）
a.class_name; 为所有 class="class_name" 的 a 元素指定一个样式;
class_name.a; 为所有 class="class_name" 元素内的 a 元素指定一个样式;

后代选择器(以空格  分隔) 		所有后代元素
子元素选择器(以大于 > 号分隔） 	直接/一级子元素
相邻兄弟选择器（以加号 + 分隔） 紧接在另一元素后的元素
普通兄弟选择器（以波浪号 ～ 分隔） 所有指定元素之后的相邻兄弟元素

属性选择器：
[name]{}	包含[name] 属性的所有元素
[name=value]{} 包含[name] 属性值为[value] 的所有元素
ele[name=value]{} 某元素ele 下所有[name] 属性值为[value]的
	多值：
	1. [attribute~=value] 包含 value，value为独立的单词
	2. [attribute*=value] 包含 value，只要能拆出来 value 这个词就行
	3. [attribute|=value] 以 value 开头, 且必须是完整且唯一的单词，或者以 - 分隔开
	4. [attribute^=value] 以 value 开头, 前几个字母是 value 就可以
	5. [attribute$=value] 以 value 结尾，后几个字母是 value 就可以
*/

/**
常用属性：默认单位px;
A: 背景：可统一为 -> 简写属性 background:#ffffff url('img_tree.png') no-repeat right top;
	1. background-color:yellow；背景色；只能设置一个
	2. background-image:url("/images/back40.gif"); 背景图 （默认情况，背景图进行平铺（水平或垂直）重复显示，以覆盖整个元素）
		不同的背景图像和图像用逗号隔开，所有的图片中显示在最顶端的为第一张；
		图片设置多个不同的属性；background: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;
	3. background-repeat:repeat-x；图像平铺样式(repeat-x:水平平铺，repeat-y:垂直平铺, no-repeat:不平铺);
	4. background-attachment:fixed; 背景图像是否固定或者随着页面的其余部分滚动(fixed:固定，scroll:页面滚动[默认], local:内容滚动, initial, inherit);
	5. background-position:right top; 修改图像的位置;
	
	6. background-origin:[content-box|padding-box|border-box]；指定了背景图像的位置区域；
	7. background-clip: [content-box|padding-box|border-box]; 从指定位置开始绘制
	
B: 文本：
	1. color:blue；文本颜色；
	2. font-family:arial；字体系列 [verdana, Serif, Sans-serif, Monospace, Times New Roman] 应该设置几个字体名称作为一种"后备"机制
	3. font-size:20px；字体大小
	4. font-style:normal; 字体样式 [normal 正常 , italic 斜体, oblique 倾斜的文字]
	5. font-weight:bold; 字体粗细 [normal=400 默认, bold 粗体, bolder 更粗，lighter 更细，100 具体大小]
	
	4. text-align:center；（文字对齐）[left、right、center、justify(两端对齐)]
	5. text-decoration:none；设置或删除文本的装饰[overline,line-through,underline]（主要是用来删除链接的下划线）
	6. direction:rtl; 文字方向[rtl，ltr]
	7. text-transform:uppercase; [uppercase:大写，capitalize:首字母大写，lowercase:小写]
	8. text-indent: 缩进元素中文本的首行 [length, %]

C: 格式、盒子模型：
	1. margin:10px；外边距 [-left, -right, -top, -bottom] （auto 居中对齐，length-px,pt,cm, %）
	2. border: 1px solid black;  边框（内边距和内容外）[solid 实线，dashed 虚线]
	3. padding:5px; 内边距(填充) [-left, -right, -top, -bottom] （length-px,pt,cm, %）
	4. align:bottom; 上中下对齐 (vertical-align 垂直对齐, horizontal-align 水平对齐) [bottom, middle, top] 
	5. outline:1px solid black; 轮廓(属性与border相似，位于边框边缘的外围，不占空间) 
	6. clear:both; 清除浮动: 指定元素两侧不能出现浮动元素[left, right, none, both]
	
	ps:
	总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距
	总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距

D: 链接： （:hover 选择器可以运用于所有元素）
	a:link {color:#000000;}     未访问链接
	a:visited {color:#00FF00;}  已访问链接 
	a:hover {color:#FF00FF;}	鼠标移动到链接上 
	a:active {color:#0000FF;}  	鼠标点击时
	
	a:hover 必须跟在 a:link 和 a:visited后面，
	a:active 必须跟在 a:hover后面
	
E: 列表：
	list-style-type: 列表项标记的类型
		none;   移除小标记
		circle; 圆圈
		disc;   圆点
		square; 正方形
	
		armenian;cjk-ideographic;decimal;decimal-leading-zero;georgian;hebrew;
		hiragana;hiragana-iroha;
		katakana;katakana-iroha;
		lower-alpha;lower-greek;lower-latin;lower-roman;
		upper-alpha;upper-latin;upper-roman;
	
	list-style-image：将图像设置为列表项标志
	list-style-position：设置列表中列表项标志的位置

F: 表格、边框 border：
	border-collapse:collapse; 设置表格的边框是否被折叠成一个单一的边框或隔开：
	
	border-style：边框样式
		border-style属性可以有1-4个值：
		none: 默认无边框
		dotted: 点线边框
		dashed: 虚线边框
		solid: 实线边框
		double: 两个边框。 两个边框的宽度和 border-width 的值相同
		groove: 3D沟槽边框。效果取决于边框的颜色值
		ridge: 3D脊边框。效果取决于边框的颜色值
		inset: 3D嵌入边框。效果取决于边框的颜色值
		outset: 3D突出边框。 效果取决于边框的颜色值
	border-width:5px; 边框宽度 [thin, medium, thick, length, inherit]
	border-color:red; 边框颜色(单独使用是不起作用的，必须得先使用border-style来设置边框样式)
	border-radius:5px; 圆角半径
	
	[border-top-,border-right-,border-bottom-,border-left-]:可分别设置每个边框属性（上下左右）
	边框-简写属性: border:5px solid red;

G: 显示：
	display: 如何显示
		none; 隐藏某个元素，且隐藏的元素不会占用任何空间
		inline; 显示为内联元素 (和相邻的内联元素在同一行)
		block; 作为块元素 (总是独占一行，而且其后的元素也必须另起一行显示;)
		flex; 弹性容器 (对一个容器中的子元素进行排列、对齐和分配空白空间)
			[int | auto 1| initial 0| none 0|  flex-grow || flex-shrink || flex-basis ] 分配空间比例
		inline-flex; 弹性容器
			flex-direction: 指定了弹性子元素在父容器中的位置
				[row 左对齐|row-reverse 右对齐|column 纵向排列|column-reverse 反转纵向排列] 
			justify-content: 把弹性项沿着弹性容器的主轴线（main axis）对齐： 水平方向
				[flex-start 向行头紧填充| flex-end 向行尾填充| center 居中填充| space-between 平均分布,空余内置| space-around 平均分布,空余外置]
			align-items: 侧轴（纵轴）方向上的对齐方式
				[flex-start 紧靠起始边界 上| flex-end 紧靠结束边界 下| center 居中| baseline 参与基线对齐| stretch 默认 充满]
			align-self: 弹性元素自身在侧轴（纵轴）方向上的对齐方式
				[auto | flex-start | flex-end | center | baseline | stretch]
			
			flex-wrap: 指定弹性盒子的子元素换行方式
				[nowrap 单行 默认|wrap 多行|wrap-reverse 反转 wrap 排列|initial]
			
			//设置弹性容器内弹性子元素的属性
			order: 数值小的排在前面,可以为负值
			
			
	visibility: 可见还是隐藏
		visible; 默认显示；
		hidden; 隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间；
		collapse; 类似于border-collapse,常用于table；
	
	position: 定位类型 与[top, left, right, bottom]搭配使用
		static; 默认值，没有定位
		relative; 相对定位
		fixed; 相对于浏览器窗口是固定位置
		absolute; 绝对定位 （使元素的位置与文档流无关，因此不占据空间，会重叠）
		sticky; 粘性定位 （基于用户的滚动位置来定位）
		
	overflow: 内容溢出元素框时显示的方式
		auto; 默认（溢出时==scroll)
		scroll; 增加滚动条
		hidden; 溢出不显示
		visible; 全部显示
		
	float: 使元素向左或向右移动，其周围的元素也会重新排列(往往是用于图像)
		left;
		right;
		浮动元素之后的元素将围绕它;
		浮动元素之前的元素将不会受到影响;
		几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻;
		
	cursor: 鼠标样式
		auto; 竖
		crosshair; 十字架
		default; 手指
		e-resize;
		help;
		move;
		n-resize;
		ne-resize;
		nw-resize;
		pointer;
		progress;
		s-resize;
		se-resize;
		sw-resize;
		text;
		w-resize;
		wait;
		
H: 
	opacity: 0.1; 图像不透明度 [0.0-1.0 值越小，元素越透明] 
	filter:alpha(opacity=100); [0 - 100 值越小，元素越透明]
	
	//滤镜效果
	filter:
		blur(4px);
		brightness(250%);
		contrast(180%);
		grayscale(100%);
		hue-rotate(180deg);
		invert(100%);
		opacity(50%);
		saturate(7);
		sepia(100%);
		drop-shadow(8px 8px 10px green);


I: 计数器 counter
	1. counter-reset: var; //创建或者重置计数器
	2. counter-increment: var; //递增变量
	3. content: "Section " counter(section) ": "; //插入生成的内容
	4. counter(var) 或 counters(var); //返回计数器的值

ps：
颜色：
	1. 十六进制 - "#ff0000"
	2. RGB - "rgb(255,0,0)"
	3. 颜色名称 - "red"

响应式布局 layout - 在屏幕宽度小于 600px 时， 设置为上下堆叠元素 
根据窗口大小更改布局及显隐某些元素
@media screen and (max-width: 600px) {
  .col-25, .col-75, input[type=submit] {
    width: 100%;
    margin-top: 0;
  }
}
*/

/** CSS3
1. 边框
	box-shadow: x,y,s,color; (水平阴影，垂直阴影，模糊的距离，阴影的颜色)添加阴影
	box-sizing: border-box; (width、height 就是元素的最终大小，内边框与外边框不计入)
	border-image:url(); 创建图片边框
	border-radius:5px; 圆角半径(左上，右上，右下，左下)
		border-top-left-radius；
		border-top-right-radius；
		border-bottom-right-radius；
		border-bottom-left-radius；

2. 渐变：background-image: linear-gradient(red, yellow, green);
	1. linear-gradient(direction/angle, c1 p1%, c2 p1%, ...)；
		direction:[to right(左到右), to bottom right(左上到右下)]; 从上到下（默认情况下）
		angle:90deg; 指水平线和渐变线之间的角度，逆时针方向计算;
		p%: 颜色的标准中心线位置
	2. radial-gradient(shape, c1 p1%, c2 p2%, ...);
		shape:[circle|ellipse(默认)]

3. 文本、字体
	text-shadow: x,y,s,color;(水平阴影，垂直阴影，模糊的距离，阴影的颜色)
		[水平阴影, 垂直阴影, 模糊, 阴影尺寸, 颜色, 外阴影转到内阴影]
	text-overflow: [clip(剪切), ellipsis(省略)] 如何显示溢出内容
	word-wrap: break-word; 允许长文本换行:
	word-break: [keep-all|break-all]; 单词拆分换行
	
	//使用字体文件, 可定义多个
	@font-face{
		font-family: myFirstFont;//字体的名称
		src: url(sansation_light.woff);//字体路径
	}
	
	@font-face{
		font-family: myFirstFont;//字体的名称
		src: url(sansation_bold.woff);//字体路径
		font-weight:bold;//粗体字
	}
	
4. 2D/3D转换
	2D: 
		translate(x, y) 移动 x轴，y轴移动多少数值
			translateX(n);
			translateY(n);
		scale(x, y) 缩放x, y 倍数(>1 放大，<1 缩小)
			scaleX(n);
			scaleY(n);
		rotate(deg) 转动角度：+ 顺时针，- 逆时针；
		skew(deg, deg) 倾斜角度；
			skewX(deg);只在X轴(水平方向)倾斜
			skewY(deg);只在Y轴(垂直方向)倾斜。
		matrix(n,n,n,n,n,n,n) 合并旋转，缩放，移动和倾斜；
	
	3D: 增加z轴；
		rotate3d(x,y,z,angle)；
		rotateX(angle)；
		rotateY(angle)；
		rotateZ(angle)；
		
	过渡: transition;
		transition: property1 dur1 (func delay), property2 dur2 (func delay), ...;
			*property: 应用过渡的 CSS 属性的名称;
			*dur: 1s 过渡效果花费的时间 默认0；
			func: [linear, ] 过渡效果的时间曲线 默认"ease";
			delay: 2s 过渡效果何时开始 默认0；
	
5. 动画：使元素从一种样式逐渐变化为另一种样式的效果
	//定义一个动画
	@keyframes anim1{
		//"from" 和 "to"，等同于 0% 和 100%
		from {background: red;}
		to {background: yellow;}
	}

	//绑定选择器；
	animation: anim1 3s;//动画的名称, 时长（默认0）；
		animation-name: myfirst; 动画的名称
		animation-duration: 5s; 动画完成一个周期所花费的秒或毫秒。默认是 0。
		animation-timing-function: linear; 动画的速度曲线。默认是 "ease"。
		animation-delay: 2s; 动画何时开始。默认是 0。
		animation-iteration-count: infinite; 动画被播放的次数。默认是 1。
		animation-direction: alternate; 动画是否在下一周期逆向地播放。默认是 "normal"。
		animation-play-state: running; 动画是否正在运行或暂停。默认是 "running"。
	animation: myfirst 5s linear 2s infinite alternate;
	
7. 多列布局; 文本内容
	column-count: 3;  //需要分割的列数
	column-width: 100px; //列的宽度
	column-gap: 10px; //列与列间的间隙
	column-span: all; //元素要跨越多少列
	
	column-rule: 1px solid red; // 简写属性
	column-rule-style: solid; [==border-style]//列与列间的边框样式
	column-rule-width: 1px; //两列的边框厚度
	column-rule-color: red; //两列的边框颜色
	
8. 用户界面
	resize: [none|both|horizontal|vertical];	//指定一个元素是否是由用户调整大小(配用 overflow:auto;)
	outline-offset: 10px; //规定边框边缘之外 n 像素处的轮廓 (配用 outline:2px solid red;)
*/

/*动画*/
@keyframes flashColor{
	0%  {color: white}
	25% {color: red;}
	50% {color: green;}
	75% {color: blue;}
	100% {color: black;}
}

@-webkit-keyframes flashColor /* Safari 与 Chrome */{
	0%  {color: white}
	25% {color: red;}
	50% {color: green;}
	75% {color: blue;}
	100% {color: black;}
}

html{
	scroll-behavior: smooth;
}

body{
	counter-reset: section;
}

.div_title::before{
	counter-increment: section;
    content: "[" counter(section) "] ";
}

/**
为了让这些块及元素在所有版本的浏览器中生效: 自定义块元素
*/
header, section, footer, aside, nav, article, figure{
    display: block;
}

/**
class
*/
/*头部样式*/
.div_header{
	background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
	padding-left: 15px;
	padding-top: 5px;
	padding-bottom: 5px;
	color: white;
	font-size: 13px;
	font-family: Monospace, Fantasy, Serif, Georgia;
	animation: flashColor 5s linear 0s infinite alternate;
}

/*顶部导航栏*/
.div_nav{
    background-color: #666666;
	padding:10px;
}

.div_nav ul{
	list-style-type: none;
	margin:0;
	padding:0;
}

.div_nav ul li{
	display: inline;
	padding-left: 10px;
	padding-right: 10px;
}

.div_nav ul .li_hidden{
	visibility: hidden;
}

.div_nav ul li a{
	text-decoration: none;
}

.div_nav ul li a:link{
	color:white;
}

.div_nav ul li a:hover:not(.nav_selected){
	color:black;
    background-color:#cdcdcd;
}

.div_nav ul li a.nav_selected{
	color: #00ff00;
	text-shadow: 3px 3px 3px #cdcdcd;
}

/*主体样式*/
.div_main{
	width:100%;
	background-color:#dddddd; /*rgba(255,0,0,0.5);*/
}

.font_center{ 
	text-align:center;
}

.color_red{
	color:red;
}

/*导航栏*/
.div_menu{
	background-color:#ffffff;
	max-width:200px;
	width:14%;
	float:left;
	margin-top:20px;
	margin-left:1%;
	margin-right:1%;
	padding:0.5%;
}

/**
一个导航栏并不需要列表标记
移除浏览器的默认设置将边距和填充设置为0
*/
.ul_menu{
	list-style-type:none;
	margin:0;
	padding:0;
}

.li_menu {
	background-color:#66ccff;
	margin:1px;
}

.li_menu a{
	display:block;
	padding-top:5px;
	padding-bottom:5px;
	width:100%;
	text-decoration:none;
	text-indent:5px;
}

.li_menu a:link{
	color:black;
}

.li_menu a:visited{
	color:#00ff00;
}

.li_menu a:hover{
	color:white;
    background-color:#cdcdcd;
}

.li_menu a:active{
    color: red;
    background-color: #4CAF50;
}

/**
下拉菜单
*/
.menu_dropdown{
	position: relative;
}

/*鼠标移动到下拉框上时显示下拉菜单*/
.menu_dropdown:hover .menu_drop_cont{
    display:block; 
}

.menu_drop_cont{
    display:none;
    position:absolute;
    background-color:#f9f9f9;
    min-width:100%;
    box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2); /*让下拉菜单看起来像一个"卡片"。*/
}

.menu_drop_cont a{
   border-bottom: 1px dashed #00ff00;
}

.menu_drop_cont a:last-child{
   border-bottom: none;
}

/*内容*/
.div_content{
	background-color:#EEEEEE;
	width:80%;
	float:left;
	margin-top:20px;
	margin-right:1%;
	padding:1%;
}

.entity_table{
	background-color:#cccccc;
}

.table_head{
	background:#000000;
	color:#ffffff;
}

.table_row_odd{
	background:#ffffff;
}

.table_row_even{
	background:#F6F4F0;
}

.c_text_p_column{
	column-count: 3;
	column-gap: 20px;
	column-rule: 1px dotted #66ccff;
}

.c_image_1{
	border-radius: 3px;
}

.c_image_2{
	border-radius: 3px;
	cursor: pointer;
	transition: 0.3s;
}

.c_image_2:hover{
	opacity:0.7;
}

/* The Modal (background) */
.c_img_dialog {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.9); /* Black w/ opacity */
}

/* Modal Content (image) */
.c_dialog_content {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
}

#dialog_caption {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
    text-align: center;
    color: #ccc;
    padding: 10px 0;
    height: 150px;
}

/* Add Animation */
.c_dialog_content, #dialog_caption  {    
    -webkit-animation-name: zoom;
    -webkit-animation-duration: 0.6s;
    animation-name: zoom;
    animation-duration: 0.6s;
}

@-webkit-keyframes zoom {
    from {-webkit-transform: scale(0)} 
    to {-webkit-transform: scale(1)}
}

@keyframes zoom {
    from {transform: scale(0.1)} 
    to {transform: scale(1)}
}

.c_dialog_close {
    position: absolute;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    transition: 0.3s;
}

.c_dialog_close:hover, .c_dialog_close:focus {
    color: #bbb;
    text-decoration: none;
    cursor: pointer;
}

.div_c_canvas_1{
	border:1px dashed #000000;
	background-color:#ffffff;
}

.div_c_svg{
	float:right;
}

/* svg
stroke: 定义轮廓颜色
stroke-width: 定义轮廓厚度
stroke-opacity: 定义轮廓颜色的透明度（合法的范围是：0 - 1）
stroke-linecap: 定义不同类型的开放路径的终结(butt, round, square)
stroke-dasharray: 用于创建虚线(a,b,c,d)（实，虚）

fill: 定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）
fill-opacity: 定义填充颜色透明度（合法的范围是：0 - 1） 
fill-rule: 填充规则 (nonzero （非零）| evenodd（奇偶） | inherit)
	指定使用哪一种算法去判断画布上的某区域是否属于该图形“内部”（被填充区）;

opacity: 定义了元素的透明值 (范围: 0 到 1)。
*/
.c_svg_polygon{
	stroke:yellow;
	stroke-width:5;
	fill:red;
	fill-rule:evenodd;
}

.c_svg_rect{
	stroke:lime;
	stroke-width:1;
	fill:gray;
}

.c_svg_circle{
	stroke:white;
	stroke-width:2;
	fill:black;
	fill-opacity:0.8;
}

.c_svg_ellipse{
	fill:white;
	stroke:purple;
	stroke-width:2;
}

.c_svg_line{
	stroke:rgb(255,0,0);
	stroke-width:2;
	stroke-dasharray:10,5,5,10;
}

.c_svg_polyline{
	fill:none;
	stroke:black;
	stroke-width:3;
	stroke-linecap:round;
}

.c_svg_text{
	fill:red;
	/*旋转 角度 旋转中心 
	transform:rotate(35 100,100); 
	*/
}

.div_c_drag_div{
	background-color:#cff4de;
	float:left; 
	width:80px; 
	height:50px; 
	margin:10px;
	padding:10px;
	border:1px dashed #aaaaaa;
}

/*图像的透明度 - 悬停效果*/
.drap_img2{
	opacity:0.5;
	filter:alpha(opacity=50);
}

.drap_img2:hover{
	opacity:1.0;
	filter:alpha(opacity=100);
}

.c_sql_div{
	background-color:black;
	width:200px; 
	height:120px; 
	margin:10px;
	padding:10px;
	border:1px dashed #ffff00;
	color:red;
	text-align:center;
}

/*底部样式*/
.div_footer{
	clear:both;
	text-align:center;
	margin:10px;
}

.span_hl_blue{
	color:blue;
}

.back_top_icon{
	position:fixed;
	bottom:20px;
	right:20px;
	transition:background-color 0.3s;
	visibility: hidden;
}

.back_top_icon:hover{
	border-radius:50%;
	background-color:#adadad;
}


/**
提示框
*/
.tip {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* 定位 */
    position: absolute;
    z-index: 1;
}

/*头部*/
.tip_head{
	visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* 定位 */
    position: absolute;
    z-index: 1;
	
	top: 150%;
    left: 50%;
    margin-left: -60px;
}

.tip_head::after {
    content: "";
    position: absolute;
	bottom: 100%;  
	left: 50%; 
	margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: black transparent transparent transparent;
}

/*底部*/
.tip_bottom{
	visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* 定位 */
    position: absolute;
    z-index: 1;
	
	bottom: 150%;
    left: 50%;
    margin-left: -60px;
}

.tip_bottom::after {
    content: "";
    position: absolute;
	top: 100%; 
	left: 50%; 
	margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: black transparent transparent transparent;
}

/*左侧*/
.tip_left{
	visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* 定位 */
    position: absolute;
    z-index: 1;
	
	top: -5px;
    left: 110%;
}

.tip_left::after {
    content: "";
    position: absolute;
	top: 50%; 
	right: 100%; 
	margin-top: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: black transparent transparent transparent;
}

/*右侧*/
.tip_right{
	visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* 定位 */
    position: absolute;
    z-index: 1;
	
	top: -5px;
    left: 110%;
}

.tip_right::after {
    content: "";
    position: absolute;
	top: 50%; 
	left: 100%; 
	margin-top: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: black transparent transparent transparent;
}

.tip_master {
    position: relative;
	display: inline-block;;
}

.tip_master:hover .tip_left {
    visibility: visible;
}

